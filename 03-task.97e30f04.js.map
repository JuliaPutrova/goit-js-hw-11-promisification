{"version":3,"sources":["js/03-task.js"],"names":["randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","delay","Promise","resolve","reject","setTimeout","id","logSuccess","time","console","log","logError","warn","amount","then","catch"],"mappings":";;;AAkEA,aAlEA,QAAA,qBAGA,MAAMA,EAA4B,CAACC,EAAKC,IAC/BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAGhDK,EAAmBC,IACjBC,MAAAA,EAAQR,EAA0B,IAAK,KAEpC,OAAA,IAAIS,QAAQ,CAACC,EAASC,KACzBC,WAAW,KACYT,KAAKE,SAAW,GAG/BK,EAAQ,CAAEH,EAAYM,GAAIL,IAE1BG,EAAOJ,EAAYM,KAExBL,MAKLM,EAAa,EAAED,EAAIE,MACvBC,QAAQC,mBAAmBJ,kBAAmBE,QAG1CG,EAAWL,IACfG,QAAQG,qCAAqCN,+BAO/CP,EAAgB,CAAEO,GAAI,GAAIO,OAAQ,MAC/BC,KAAKP,GACLQ,MAAMJ,GAETZ,EAAgB,CAAEO,GAAI,GAAIO,OAAQ,MAC/BC,KAAKP,GACLQ,MAAMJ,GAETZ,EAAgB,CAAEO,GAAI,GAAIO,OAAQ,KAC/BC,KAAKP,GACLQ,MAAMJ,GAETZ,EAAgB,CAAEO,GAAI,GAAIO,OAAQ,MAC/BC,KAAKP,GACHQ,MAAMJ","file":"03-task.97e30f04.js","sourceRoot":"../src","sourcesContent":["import '../css/styles.css';\n\n\nconst randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = (transaction) => {\n  const delay = randomIntegerFromInterval(200, 500);\n\n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n            const canProcess = Math.random() > 0.3;\n\n            if (canProcess) {\n                resolve([ transaction.id, delay ]);\n            } else {\n                reject(transaction.id);\n            }\n        }, delay);\n    })\n\n};\n\nconst logSuccess = ([id, time]) => {\n  console.log(`Transaction ${id} processed in ${time}ms`);\n};\n\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\n\n/*\n * Должно работать так\n */\nmakeTransaction({ id: 70, amount: 150 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 71, amount: 230 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 72, amount: 75 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 73, amount: 100 })\n  .then(logSuccess)\n    .catch(logError);\n  \n\n\n    //пример!!!! 1-вариант, т.к. агрументы в функции  fn сшиты в один объект ({ a: 10, b: 15}), в параметры записывается один объект (obj), и в консоле в шаблонной строке доступ к объекту с помощью клчюча\n// function fn(obj) {\n//     console.log(`value: ${obj.a}, value: ${obj.b}`);\n//     }\n   \n// fn({ a: 10, b: 15});\n\n    //пример!!!! 2-вариант т.к. агрументы в функции  fn сшиты в один объект ({ a: 10, b: 15}), в параметры записывается один объект ({a,b}), и в консоле в шаблонной строке доступ к каждому объекту\n// function fn({a,b}) {\n//     console.log(`value: ${a}, value: ${b}`);\n//     }\n\n// fn({ a: 10, b: 15});"]}